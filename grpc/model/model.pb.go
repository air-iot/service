// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	GrpcRequest
	GrpcResponse
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GrpcRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *GrpcRequest) Reset()                    { *m = GrpcRequest{} }
func (m *GrpcRequest) String() string            { return proto.CompactTextString(m) }
func (*GrpcRequest) ProtoMessage()               {}
func (*GrpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GrpcRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GrpcResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GrpcResponse) Reset()                    { *m = GrpcResponse{} }
func (m *GrpcResponse) String() string            { return proto.CompactTextString(m) }
func (*GrpcResponse) ProtoMessage()               {}
func (*GrpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GrpcResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*GrpcRequest)(nil), "model.GrpcRequest")
	proto.RegisterType((*GrpcResponse)(nil), "model.GrpcResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Model service

type ModelClient interface {
	FindByID(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error)
	FindQuery(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error)
}

type modelClient struct {
	cc *grpc.ClientConn
}

func NewModelClient(cc *grpc.ClientConn) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) FindByID(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := grpc.Invoke(ctx, "/model.Model/FindByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) FindQuery(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := grpc.Invoke(ctx, "/model.Model/FindQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Model service

type ModelServer interface {
	FindByID(context.Context, *GrpcRequest) (*GrpcResponse, error)
	FindQuery(context.Context, *GrpcRequest) (*GrpcResponse, error)
}

func RegisterModelServer(s *grpc.Server, srv ModelServer) {
	s.RegisterService(&_Model_serviceDesc, srv)
}

func _Model_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Model/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).FindByID(ctx, req.(*GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_FindQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).FindQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Model/FindQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).FindQuery(ctx, req.(*GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Model_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByID",
			Handler:    _Model_FindByID_Handler,
		},
		{
			MethodName: "FindQuery",
			Handler:    _Model_FindQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x94, 0xb9, 0xb8, 0xdd,
	0x8b, 0x0a, 0x92, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x4b,
	0x53, 0x8b, 0x2a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x35, 0x2e, 0x1e,
	0x88, 0xa2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e, 0xb6, 0xa2, 0xd4, 0xe2, 0xd2,
	0x9c, 0x12, 0xa8, 0x32, 0x28, 0xcf, 0xa8, 0x8c, 0x8b, 0xd5, 0x17, 0x64, 0xaa, 0x90, 0x29, 0x17,
	0x87, 0x5b, 0x66, 0x5e, 0x8a, 0x53, 0xa5, 0xa7, 0x8b, 0x90, 0x90, 0x1e, 0xc4, 0x5a, 0x24, 0x6b,
	0xa4, 0x84, 0x51, 0xc4, 0x20, 0xa6, 0x2a, 0x31, 0x08, 0x99, 0x71, 0x71, 0x82, 0xb4, 0x05, 0x82,
	0x2c, 0x25, 0x41, 0x5f, 0x12, 0x1b, 0xd8, 0x4b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0x2e, 0x92, 0xf3, 0xe1, 0x00, 0x00, 0x00,
}
